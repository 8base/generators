// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should generate create form by the table name 1`] = `
"import React from 'react';
import gql from 'graphql-tag';
import { Query, graphql } from 'react-apollo';
import { Form as FormLogic, Field, FieldArray } from '@8base/forms';
import {
  Dialog,
  Grid,
  Button,
  Form,
  Row,
  Column,
  Icon,
  Text,
  SelectField,
  InputField,
  CheckboxField,
  DateInputField,
  Label,
  ModalContext,
} from '@8base/boost';
import { AddressInputField, PhoneInputField, ListFields, FileInputField } from '../../shared/components';

const PROPERTY_CREATE_MUTATION = gql\`
  mutation PropertyCreate($data: PropertyCreateInput!) {
    propertyCreate(data: $data) {
      id
    }
  }
\`;

const LISTINGS_LIST_QUERY = gql\`
  query ListingsList {
    listingsList: listingsList {
      items {
        id
        _description
      }
    }
  }
\`;

const getRelationOptions = (items = []) =>
  items.map(item => ({ value: item.id, label: item._description || 'Untitled Record' }));

const enhancer = graphql(PROPERTY_CREATE_MUTATION, {
  name: 'propertyCreate',
  options: {
    refetchQueries: ['PropertiesTableContent', 'PropertiesList'],
    context: {
      TOAST_SUCCESS_MESSAGE: 'Property successfuly created',
    },
  },
});

const PropertyCreateDialog = enhancer(
  class PropertyCreateDialog extends React.PureComponent {
    static contextType = ModalContext;

    onSubmit = async data => {
      await this.props.propertyCreate({ variables: { data } });

      this.context.closeModal('PROPERTY_CREATE_DIALOG_ID');
    };

    onClose = () => {
      this.context.closeModal('PROPERTY_CREATE_DIALOG_ID');
    };

    renderFormContent = ({ handleSubmit, invalid, submitting, pristine }) => (
      <form onSubmit={handleSubmit}>
        <Dialog.Header title=\\"New Property\\" onClose={this.onClose} />
        <Dialog.Body scrollable>
          <Grid.Layout gap=\\"md\\" stretch>
            <Grid.Box>
              <Field name=\\"address\\" label=\\"Address\\" component={AddressInputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"phone\\" label=\\"Phone\\" component={PhoneInputField} />
            </Grid.Box>
            <Grid.Box>
              <FieldArray name=\\"pictures\\">
                {({ fields }) => <ListFields fields={fields} label=\\"Pictures\\" component={FileInputField} />}
              </FieldArray>
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"bedrooms\\" label=\\"Bedrooms\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"title\\" label=\\"title\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"description\\" label=\\"Description\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"sqFootage\\" label=\\"Sq Footage\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"bathrooms\\" label=\\"Bathrooms\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"garage\\" label=\\"Garage\\" component={CheckboxField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"pool\\" label=\\"Pool\\" component={CheckboxField} />
            </Grid.Box>
            <Grid.Box>
              <Query query={LISTINGS_LIST_QUERY}>
                {({ data, loading }) => (
                  <Field
                    name=\\"listings\\"
                    label=\\"Listings\\"
                    multiple={true}
                    component={SelectField}
                    placeholder=\\"Select a listing\\"
                    loading={loading}
                    options={loading ? [] : getRelationOptions(data.listingsList.items)}
                    stretch
                  />
                )}
              </Query>
            </Grid.Box>
          </Grid.Layout>
        </Dialog.Body>
        <Dialog.Footer>
          <Button color=\\"neutral\\" type=\\"button\\" variant=\\"outlined\\" disabled={submitting} onClick={this.onClose}>
            Cancel
          </Button>
          <Button color=\\"primary\\" type=\\"submit\\" loading={submitting}>
            Create Property
          </Button>
        </Dialog.Footer>
      </form>
    );

    render() {
      return (
        <Dialog id={'PROPERTY_CREATE_DIALOG_ID'} size=\\"sm\\">
          <FormLogic type=\\"CREATE\\" tableSchemaName=\\"Properties\\" onSubmit={this.onSubmit}>
            {this.renderFormContent}
          </FormLogic>
        </Dialog>
      );
    }
  }
);

export { PropertyCreateDialog };
"
`;
