// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should generate update form by the table name 1`] = `
"import React from 'react';
import { memoizeWith, identity } from 'ramda';
import gql from 'graphql-tag';
import { Query, graphql } from 'react-apollo';
import { Form as FormLogic, Field, FieldArray } from '@8base/forms';
import {
  AsyncContent,
  Dialog,
  Grid,
  Button,
  Form,
  Row,
  Column,
  Icon,
  Text,
  SelectField,
  InputField,
  CheckboxField,
  DateInputField,
  Label,
  ModalContext,
} from '@8base/boost';
import { AddressInputField, PhoneInputField, ListFields, FileInputField } from '../../shared/components';

const PROPERTY_QUERY = gql\`
  query DataViewerPropertiesRow($id: ID!) {
  property(id: $id) {
    address {
      country
    }
    phone {
      code
      number
    }
    pictures {
      items {
        id
        fileId
        filename
        downloadUrl
        shareUrl
        meta
      }
      count
    }
    bedrooms
    title
    description
    sqFootage
    bathrooms
    garage
    pool
    listings {
      items {
        id
        _description
      }
      count
    }
  }
} 
\`;

const PROPERTY_UPDATE_MUTATION = gql\`
  mutation PropertyUpdate($data: PropertyUpdateInput!) {
    propertyUpdate(data: $data) {
      id
    }
  }
\`;

const LISTINGS_LIST_QUERY = gql\`
  query ListingsList {
    listingsList: listingsList {
      items {
        id
        _description
      }
    }
  }
\`;

const getRelationOptions = (items = []) =>
  items.map(item => ({ value: item.id, label: item._description || 'Untitled Record' }));

const ehnhancer = graphql(PROPERTY_UPDATE_MUTATION, {
  name: 'propertyUpdate',
  options: {
    refetchQueries: ['PropertiesTableContent', 'PropertiesList'],
    context: {
      TOAST_SUCCESS_MESSAGE: 'Property successfuly updated',
    },
  },
});

const PropertyEditDialog = ehnhancer(
  class PropertyEditDialog extends React.PureComponent {
    static contextType = ModalContext;

    updateOnSubmit = memoizeWith(identity, id => async data => {
      await this.props.propertyUpdate({ variables: { data: { ...data, id } } });

      this.context.closeModal('PROPERTY_EDIT_DIALOG_ID');
    });

    onClose = () => {
      this.context.closeModal('PROPERTY_EDIT_DIALOG_ID');
    };

    renderForm = ({ args }) => {
      return (
        <Query query={BROKER_QUERY} variables={{ id: args.id }}>
          {({ data, loading }) => (
            <FormLogic
              type=\\"UPDATE\\"
              tableSchemaName=\\"Properties\\"
              onSubmit={this.updateOnSubmit(args.id)}
              initialValues={data.property}
            >
              {({ handleSubmit, invalid, submitting, pristine }) => (
                <form onSubmit={handleSubmit}>
                  <Dialog.Header title=\\"Edit Property\\" onClose={this.onClose} />
                  <Dialog.Body scrollable>
                    <AsyncContent loading={loading} stretch>
                      <Grid.Layout gap=\\"md\\" stretch>
                        <Grid.Box>
                          <Field name=\\"address\\" label=\\"Address\\" component={AddressInputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"phone\\" label=\\"Phone\\" component={PhoneInputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <FieldArray name=\\"pictures\\">
                            {({ fields }) => <ListFields fields={fields} label=\\"Pictures\\" component={FileInputField} />}
                          </FieldArray>
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"bedrooms\\" label=\\"Bedrooms\\" type=\\"number\\" component={InputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"title\\" label=\\"title\\" component={InputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"description\\" label=\\"Description\\" component={InputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"sqFootage\\" label=\\"Sq Footage\\" type=\\"number\\" component={InputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"bathrooms\\" label=\\"Bathrooms\\" type=\\"number\\" component={InputField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"garage\\" label=\\"Garage\\" component={CheckboxField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Field name=\\"pool\\" label=\\"Pool\\" component={CheckboxField} />
                        </Grid.Box>
                        <Grid.Box>
                          <Query query={LISTINGS_LIST_QUERY}>
                            {({ data, loading }) => (
                              <Field
                                name=\\"listings\\"
                                label=\\"Listings\\"
                                multiple={true}
                                component={SelectField}
                                placeholder=\\"Select a listing\\"
                                loading={loading}
                                options={loading ? [] : getRelationOptions(data.listingsList.items)}
                                stretch
                              />
                            )}
                          </Query>
                        </Grid.Box>
                      </Grid.Layout>
                    </AsyncContent>
                  </Dialog.Body>
                  <Dialog.Footer>
                    <Button
                      color=\\"neutral\\"
                      type=\\"button\\"
                      variant=\\"outlined\\"
                      disabled={submitting}
                      onClick={this.onClose}
                    >
                      Cancel
                    </Button>
                    <Button color=\\"primary\\" type=\\"submit\\" disabled={pristine || invalid} loading={submitting}>
                      Update Property
                    </Button>
                  </Dialog.Footer>
                </form>
              )}
            </FormLogic>
          )}
        </Query>
      );
    };

    render() {
      return (
        <Dialog id={'PROPERTY_EDIT_DIALOG_ID'} size=\\"sm\\">
          {this.renderForm}
        </Dialog>
      );
    }
  }
);

export { PropertyEditDialog };
"
`;
